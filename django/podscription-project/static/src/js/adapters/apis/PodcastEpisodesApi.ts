/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PodcastEpisodeLightOut,
  PodcastEpisodeOut,
} from '../models';
import {
    PodcastEpisodeLightOutFromJSON,
    PodcastEpisodeLightOutToJSON,
    PodcastEpisodeOutFromJSON,
    PodcastEpisodeOutToJSON,
} from '../models';

export interface GetPodcastEpisodeRequest {
    podcastId: number;
    episodeId: number;
}

export interface ListPodcastEpisodesRequest {
    podcastId: number;
    page?: number;
}

/**
 * 
 */
export class PodcastEpisodesApi extends runtime.BaseAPI {

    /**
     * Get Podcast Episode
     */
    async getPodcastEpisodeRaw(requestParameters: GetPodcastEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PodcastEpisodeOut>> {
        if (requestParameters.podcastId === null || requestParameters.podcastId === undefined) {
            throw new runtime.RequiredError('podcastId','Required parameter requestParameters.podcastId was null or undefined when calling getPodcastEpisode.');
        }

        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling getPodcastEpisode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/podcasts/{podcast_id}/episodes/{episode_id}`.replace(`{${"podcast_id"}}`, encodeURIComponent(String(requestParameters.podcastId))).replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastEpisodeOutFromJSON(jsonValue));
    }

    /**
     * Get Podcast Episode
     */
    async getPodcastEpisode(requestParameters: GetPodcastEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PodcastEpisodeOut> {
        const response = await this.getPodcastEpisodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Podcast Episodes
     */
    async listPodcastEpisodesRaw(requestParameters: ListPodcastEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PodcastEpisodeLightOut>>> {
        if (requestParameters.podcastId === null || requestParameters.podcastId === undefined) {
            throw new runtime.RequiredError('podcastId','Required parameter requestParameters.podcastId was null or undefined when calling listPodcastEpisodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/podcasts/{podcast_id}/episodes`.replace(`{${"podcast_id"}}`, encodeURIComponent(String(requestParameters.podcastId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PodcastEpisodeLightOutFromJSON));
    }

    /**
     * List Podcast Episodes
     */
    async listPodcastEpisodes(requestParameters: ListPodcastEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PodcastEpisodeLightOut>> {
        const response = await this.listPodcastEpisodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
