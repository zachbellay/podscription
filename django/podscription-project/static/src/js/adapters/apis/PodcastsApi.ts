/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PodcastOut,
} from '../models';
import {
    PodcastOutFromJSON,
    PodcastOutToJSON,
} from '../models';

export interface GetPodcastRequest {
    podcastId: number;
}

export interface GetPodcastBySlugRequest {
    podcastSlug: string;
}

export interface ListPodcastsRequest {
    page?: number;
}

/**
 * 
 */
export class PodcastsApi extends runtime.BaseAPI {

    /**
     * Get Podcast
     */
    async getPodcastRaw(requestParameters: GetPodcastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PodcastOut>> {
        if (requestParameters.podcastId === null || requestParameters.podcastId === undefined) {
            throw new runtime.RequiredError('podcastId','Required parameter requestParameters.podcastId was null or undefined when calling getPodcast.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/podcasts/id/{podcast_id}`.replace(`{${"podcast_id"}}`, encodeURIComponent(String(requestParameters.podcastId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastOutFromJSON(jsonValue));
    }

    /**
     * Get Podcast
     */
    async getPodcast(requestParameters: GetPodcastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PodcastOut> {
        const response = await this.getPodcastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Podcast By Slug
     */
    async getPodcastBySlugRaw(requestParameters: GetPodcastBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PodcastOut>> {
        if (requestParameters.podcastSlug === null || requestParameters.podcastSlug === undefined) {
            throw new runtime.RequiredError('podcastSlug','Required parameter requestParameters.podcastSlug was null or undefined when calling getPodcastBySlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/podcasts/slug/{podcast_slug}`.replace(`{${"podcast_slug"}}`, encodeURIComponent(String(requestParameters.podcastSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastOutFromJSON(jsonValue));
    }

    /**
     * Get Podcast By Slug
     */
    async getPodcastBySlug(requestParameters: GetPodcastBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PodcastOut> {
        const response = await this.getPodcastBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Podcasts
     */
    async listPodcastsRaw(requestParameters: ListPodcastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PodcastOut>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/podcasts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PodcastOutFromJSON));
    }

    /**
     * List Podcasts
     */
    async listPodcasts(requestParameters: ListPodcastsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PodcastOut>> {
        const response = await this.listPodcastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
