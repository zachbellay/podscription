/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PodcastOut
 */
export interface PodcastOut {
    /**
     * 
     * @type {number}
     * @memberof PodcastOut
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    author: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    logoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    websiteUrl: string;
    /**
     * 
     * @type {string}
     * @memberof PodcastOut
     */
    slug: string;
}

/**
 * Check if a given object implements the PodcastOut interface.
 */
export function instanceOfPodcastOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "logoUrl" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "websiteUrl" in value;
    isInstance = isInstance && "slug" in value;

    return isInstance;
}

export function PodcastOutFromJSON(json: any): PodcastOut {
    return PodcastOutFromJSONTyped(json, false);
}

export function PodcastOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): PodcastOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'author': json['author'],
        'url': json['url'],
        'logoUrl': json['logo_url'],
        'description': json['description'],
        'websiteUrl': json['website_url'],
        'slug': json['slug'],
    };
}

export function PodcastOutToJSON(value?: PodcastOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'author': value.author,
        'url': value.url,
        'logo_url': value.logoUrl,
        'description': value.description,
        'website_url': value.websiteUrl,
        'slug': value.slug,
    };
}

